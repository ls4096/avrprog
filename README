The "avrprog" project explores some of the capabilities of the ATmega328P MCU (used on boards such as the Arduino Duemilanove and Arduino Uno).

This project must run within the memory constraints of the ATmega328P (32 KB for instructions, and 2 KB SRAM for data), so it is an interesting challenge to see how much can be accomplished within these constraints. At the moment, the project seems to be well within these limits, and there is much room for additional features.

NOTE: The build as it is configured assumes a 16 MHz core clock, as it is configured on the Arduino boards. If running with a different clock, the F_CPU value should be modified accordingly. Other things may also misbehave at different clocks (such as the ADC, where the prescale factor used may need to be changed, and possibly the serial communication if the timings don't quite match up), but it should be possible to resolve with some minor code changes.


Some ATmega328P functionality used:
	- Timer
	- Serial communication using the USART
	- ADC to estimate chip's internal temperature
	- Some very basic power management using the "sleep" instruction

Features of "avrprog" include:
	- A lightweight "shell" in which to launch built-in commands
		- with limited use of VT100 codes to support "backspace", "up" for previous command, and for clearing the screen
	- Some system utilities, including a "CPU usage" counter and a stack pointer monitor which samples stack memory usage over time
	- Random number generator
		- LCG algorithm with some added entropy based on USART RX timings
	- Pong!
		- 'w'/'s' (player 1); up/down (player 2); space to resume; 'Q' to quit


====================
Build and run steps:

1. Ensure that the AVR build and flash tools are installed.
	These tools can be obtained from the Arduino development package, for example, which can be found online.

2. Set up environment:
	$ export AVR_TOOLS_DIR="/path/to/hardware/tools/avr/"
	$ export AVR_FLASH_PORT="/dev/ttyUSB0"
		- Or another port, if not /dev/ttyUSB0

3. Build:
	$ make

4. Flash to board:
	$ make flash

5. Connect to board over serial:
	$ screen $AVR_FLASH_PORT 57600
		- Or any other available serial communication tool

6. Once connected over serial, type "help" to get a list of commands.
